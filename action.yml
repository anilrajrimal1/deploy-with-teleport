name: "Teleport Docker Deploy"
description: "Deploys a Docker Compose to a remote server over Teleport (TSH)"
author: "Anil Raj Rimal"

inputs:
  TELEPORT_HOST:
    description: "Teleport proxy host (e.g., teleport.example.com:443)"
    required: true

  TELEPORT_TOKEN:
    description: "Teleport short-lived join token"
    required: true

  SSH_USER:
    description: "SSH username on the target machine"
    required: true

  SSH_HOST:
    description: "Server's Hostname (not IP!)"
    required: true

  BRANCH_NAME:
    description: "Workflow Triggering Branch"
    required: true

  PROJECT_DIR:
    description: "Directory on the server where files should be deployed"
    required: true

  COMPOSE_FILE_PATH:
    description: "Path to the Docker Compose file to copy from"
    required: false
    default: "./docker/server/"

  PHASE_SERVICE_TOKEN:
    required: true
    description: "Phase Token for Service Account"

  PHASE_APP_ID:
    required: true
    description: "The Unique Identifier for the Projects in Phase"

  PHASE_HOST:
    required: false
    default: 'https://phase.naxa.com.np'
    description: "Only required for self-hosted one"

  PHASE_ENV:
    required: true
    description: "Environment name to fetch secrets for (e.g., develop, staging, master)."

  ENV_FILE:
    description: "Path to the .env file"
    required: true
    default: "."

  AWS_ACCESS_KEY_ID:
    description: "AWS Access Key ID"
    required: true

  AWS_SECRET_ACCESS_KEY:
    description: "AWS Secret Access Key"
    required: true

  AWS_REGION:
    description: "AWS region for ECR login"
    required: true
    default: "ap-south-1"

  ECR_REGISTRY:
    description: "AWS ECR registry URL"
    required: true

outputs:
  status:
    description: "Deployment status"
    value: ${{ steps.deploy.outputs.status }}

runs:
  using: "composite"
  steps:
  - name: Checkout Repository
    uses: actions/checkout@v5
    with:
      ref: ${{ inputs.BRANCH_NAME }}

  - name: Install Teleport CLI
    uses: teleport-actions/setup@v1
    with:
      version: 14.3.19

  - name: Authenticate with Teleport
    id: teleport-auth
    uses: teleport-actions/auth@v2
    with:
      proxy: ${{ inputs.TELEPORT_HOST }}
      token: ${{ inputs.TELEPORT_TOKEN }}
      certificate-ttl: 2h
      anonymous-telemetry: 0

  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v5
    with:
      aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ inputs.AWS_REGION }}

  - name: Login to Amazon ECR
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v2

  - name: Generate env from Phase
    uses: naxa-developers/gh-workflows/.github/actions/phase_env_fetch@master
    with:
      phase_service_token: ${{ inputs.PHASE_SERVICE_TOKEN }}
      phase_app_id: ${{ inputs.PHASE_APP_ID }}
      phase_env: ${{ inputs.PHASE_ENV }}
      phase_host: ${{ inputs.PHASE_HOST }}

  - name: Copy Compose File to Root
    shell: bash
    run: |
      cp ${{ inputs.COMPOSE_FILE_PATH }}docker-compose.${{ inputs.BRANCH_NAME }}.yml docker-compose.yml

  - name: Pull image and Deploy
    id: deploy
    shell: bash
    run: |
      echo "Copying files to remote server..."
      tsh scp -i "${{ steps.teleport-auth.outputs.identity-file }}" --proxy "${{ inputs.TELEPORT_HOST }}" .env "${{ inputs.SSH_USER }}@${{ inputs.SSH_HOST }}:${{ inputs.PROJECT_DIR }}/.env"
      tsh scp -i "${{ steps.teleport-auth.outputs.identity-file }}" --proxy "${{ inputs.TELEPORT_HOST }}" docker-compose.yml "${{ inputs.SSH_USER }}@${{ inputs.SSH_HOST }}:${{ inputs.PROJECT_DIR }}/docker-compose.yml"

      echo "Fetching ECR login credentials..."
      ECR_PASS=$(aws ecr get-login-password --region "${{ inputs.AWS_REGION }}")

      echo "Deploying on remote server..."
      tsh ssh -i "${{ steps.teleport-auth.outputs.identity-file }}" --proxy "${{ inputs.TELEPORT_HOST }}" "${{ inputs.SSH_USER }}@${{ inputs.SSH_HOST }}" << EOF
        set -e
        cd "${{ inputs.PROJECT_DIR }}"
        echo "\$ECR_PASS" | docker login --username AWS --password-stdin "${{ inputs.ECR_REGISTRY }}"
        docker compose --file docker-compose.yml pull
        docker compose up -d --build --force-recreate
        echo "Containers are up and running!"
        exit 0
      EOF
      echo "status=success" >> "$GITHUB_OUTPUT"

branding:
  icon: "cloud"
  color: "blue"
